.wrapper {
  &-lg,
  &-md {
    box-sizing: border-box;
    margin: 0 auto;
  }
  &-lg {
    max-width: $grid-max-width-lg;
  }
  &-md {
    max-width: $grid-max-width-md;
  }
}

.container-fluid {
  margin-right: auto;
  margin-left: auto;
  padding-right: $grid-outer-margin;
  padding-left: $grid-outer-margin;
}

.container-section {
  padding: 3em 2em;
  &__primary {
    background-color: #fff;
    >h2 {
      color: $color-primary;
    }
  }
  &__secondary {
    >h2 {
      color: #fff;
    }
    a {
      color: #fff;
    }
    background-color: $color-primary;
  }
}

.container-row{
  margin-right: auto;
  margin-left: auto;
  padding-right: $half-gutter-width;
  padding-left: $half-gutter-width;
}

.row {
  box-sizing: border-box;
  @include flexbox();
  @include flex(0, 1, auto);
  @include flex-direction(row);
  @include flex-wrap(wrap);
  margin-right: $gutter-width;
  margin-left: $gutter-width;
}

.row.reverse {
  @include flex-direction(row-reverse);
}

.col.reverse {
  @include flex-direction(column-reverse);
}

@mixin flexcol-common {
  box-sizing: border-box; // split @include flex(0, 0, auto) into individual props
  @include flex-grow(0);
  @include flex-shrink(0); // we leave @include flex-basis(auto) out of common because
  // in some spots we need it and some we dont
  // more why here: https://github.com/kristoferjoseph/flexboxgrid/issues/126
  padding-right: $half-gutter-width;
  padding-left: $half-gutter-width;
}

$name: xs;
.col-#{$name} {
  @include flexcol-common;
  @include flex-basis(auto);
}

@for $i from 1 through $grid-columns {
  .col-#{$name}-#{$i} {
    @include flexcol-common;
    @include flex-basis(100% / $grid-columns * $i);
    max-width: 100% / $grid-columns * $i;
  }
}
.col-#{$name} {
  @include flex-grow(1);
  @include flex-basis(0);
  max-width: 100%;
}

.start-#{$name} {
  @include justify-content(flex-start);
  text-align: left;
}

.center-#{$name} {
  @include justify-content(center);
  text-align: center;
}

.end-#{$name} {
  @include justify-content(flex-end);
  text-align: right;
}

.top-#{$name} {
  @include align-items(flex-start);
}

.middle-#{$name} {
  @include align-items(center);
}

.bottom-#{$name} {
  @include align-items(flex-end);
}

.around-#{$name} {
  @include justify-content(space-around);
}

.between-#{$name} {
  @include justify-content(space-between);
}

.first-#{$name} {
  order: -1;
}

.last-#{$name} {
  order: 1;
}

@each $breakpoint in $grid-breakpoints {
  $name: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);
  $container: nth($breakpoint, 3);
  @media only screen and (min-width: $size) {
    .container {
      width: $container;
    }
    .col-#{$name} {
      @include flexcol-common;
      @include flex-basis(auto);
    }
    @for $i from 1 through $grid-columns {
      .col-#{$name}-#{$i} {
        @include flexcol-common;
        @include flex-basis(100% / $grid-columns * $i);
        max-width: 100% / $grid-columns * $i;
      }
    } 
    .col-#{$name} {
      @include flex-grow(1);
      @include flex-basis(0);
      max-width: 100%;
    }
    .start-#{$name} {
      @include justify-content(flex-start);
      text-align: left;
    }
    .center-#{$name} {
      @include justify-content(center);
      text-align: center;
    }
    .end-#{$name} {
      @include justify-content(flex-end);
      text-align: right;
    }
    .top-#{$name} {
      @include align-items(flex-start);
    }
    .middle-#{$name} {
      @include align-items(center);
    }
    .bottom-#{$name} {
      @include align-items(flex-end);
    }
    .around-#{$name} {
      @include justify-content(space-around);
    }
    .between-#{$name} {
      @include justify-content(space-between);
    }
    .first-#{$name} {
      order: -1;
    }
    .last-#{$name} {
      order: 1;
    }
  }
}

.mgn-b-2{
  margin-bottom: 20px;
}

.mgn-b-4{
  margin-bottom: 40px;
}

.mgn-b-6{
  margin-bottom: 60px;
}

.mgn-subnav{
  margin-top: 56px;
}

.pdg-b-none{
  padding-bottom: 0;
}

.hidden-xs-up {
  display: none;
}

.fit-height{
  height: calc(100vh - 88px);
}

@media (min-width:75em) {
  .fit-height {
    height: calc(100vh - 158px);
  }
}